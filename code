REPORT ZSERKAN_O_CELL_BUTTON.
TABLES: SPFLI.

CLASS lcl_report DEFINITION.
*
  PUBLIC SECTION.
*
*   Final output table
TYPES: BEGIN OF GS_DATA  ,
  CELL_COLOR TYPE LVC_T_SCOL, "Hücre renk bilgileri için tablo.
    i_celltype TYPE salv_t_int4_column,
  CARRID   LIKE SPFLI-CARRID,
  CITYFROM LIKE SPFLI-CITYFROM,
  DISTANCE LIKE SPFLI-DISTANCE,
  END OF GS_DATA.

    DATA: GT_DATA TYPE STANDARD TABLE OF GS_DATA,
             L_CELL_COLOR TYPE LINE OF LVC_T_SCOL,
             GS_LAYOUT TYPE SLIS_LAYOUT_ALV.


*   ALV reference
    DATA: o_alv TYPE REF TO cl_salv_table.

    METHODS:
      get_data,           "  data selection
      generate_output.    "  Generating output
*
  PRIVATE SECTION.
    METHODS:
      set_columns.        "  Set columns
ENDCLASS.                    "lcl_report DEFINITION
*
*
START-OF-SELECTION.
  DATA: lo_report TYPE REF TO lcl_report.
*
  CREATE OBJECT lo_report.
  lo_report->get_data( ).
  lo_report->generate_output( ).
*
CLASS lcl_report IMPLEMENTATION.
*
  METHOD get_data.
*   data selection

    SELECT
    SPFLI~CARRID
    SPFLI~CITYFROM
    SPFLI~DISTANCE
        INTO CORRESPONDING FIELDS OF TABLE GT_DATA FROM SPFLI.

    FIELD-SYMBOLS: <lfs_data> LIKE LINE OF gt_data.
    DATA: lt_celltype TYPE salv_t_int4_column.
    DATA: ls_celltype LIKE LINE OF lt_celltype.
    LOOP AT gt_data ASSIGNING <lfs_data>.
      CLEAR: lt_celltype.
* Only ERDAT for 1rd record
     IF <lfs_data>-distance > 5000.
        ls_celltype-columnname = 'DISTANCE'.
        ls_celltype-VALUE      = if_salv_c_cell_type=>button.
          APPEND ls_celltype TO lt_celltype.
      ENDIF.
      <lfs_data>-i_celltype = lt_celltype.
    ENDLOOP.

  ENDMETHOD.                    "get_data
*
  METHOD generate_output.
* New ALV instance
    DATA: lx_msg TYPE REF TO cx_salv_msg.
    TRY.
        cl_salv_table=>factory(
          IMPORTING
            r_salv_table = o_alv
          CHANGING
            t_table      = gt_data ).
      CATCH cx_salv_msg INTO lx_msg.
    ENDTRY.
*
* Setting up the Columns
    me->set_columns( ).

* Displaying the ALV
    o_alv->display( ).

  ENDMETHOD.                    "generate_output
*
  METHOD set_columns.
*
*...Get all the Columns
    DATA: lo_cols TYPE REF TO cl_salv_columns_table.
    lo_cols = o_alv->get_columns( ).
*
*   set the Column optimization
    lo_cols->set_optimize( 'X' ).

*   Set the Cell Type
    TRY.
        lo_cols->set_cell_type_column( 'I_CELLTYPE' ).
      CATCH cx_salv_data_error.                         "#EC NO_HANDLER
    ENDTRY.

  ENDMETHOD.                    "SET_COLUMNS
ENDCLASS.                    "lcl_report IMPLEMENTATION
